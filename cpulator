.equ UART_DATA_REGISTER_ADDRESS, 0xff201000
.equ DISPLAYS_BASE_1, 0xff200020

@buttons:

.equ Up_button, 0x8055
.equ Down_button, 0x8044

.equ SVC_MODE_STACK_BASE, 0x3FFFFFFF - 3 // set SVC stack to top of DDR3 memory
.equ IRQ_MODE_STACK_BASE, 0xFFFFFFFF - 3 // set IRQ stack to A9 onchip memory

// GIC Base addresses
.equ GIC_CPU_INTERFACE_BASE, 0xFFFEC100
.equ GIC_DISTRIBUTOR_BASE, 0xFFFED000

// Other I/O device base addresses
.equ LED_BASE, 0xff200000
.equ SW_BASE, 0xff200040
.equ BTN_BASE, 0xff200050
.equ DISPLAYS_BASE, 0xff200020
.equ UART_BASE, 0xff201000
.equ UART_DATA_REGISTER, 0xff201000
.equ UART_CONTROL_REGISTER, 0xff201004

.equ pushbutton_interruptmask, 0xFF200058
.equ pushbutton_edgecup, 0xFF20005C
.equ first_pushbutton, 0b00000001
.equ second_pushbutton, 0b00000010
.equ pushbutton_base, 0xFF200050

.data         @ Align to word boundary
sevenSegmentValues:
    .word 0b00111111  // 0
    .word 0b00000110  // 1
    .word 0b01011011  // 2
    .word 0b01001111  // 3
    .word 0b01100110  // 4
    .word 0b01101101  // 5
    .word 0b01111101  // 6
    .word 0b00000111  // 7
    .word 0b01111111  // 8
    .word 0b01101111  // 9
    .word 0b01110111  // A
    .word 0b01111100  // b
    .word 0b00111001  // C
    .word 0b01011110  // d
    .word 0b01111001  // E
    .word 0b01110001  // F

.equ counter, 0
.text
.org 0x00  // Address of interrupt vector
    B _start    // reset vector
    B SERVICE_UND // undefined instruction vector
    B SERVICE_SVC // software interrrupt (supervisor call) vector
    B SERVICE_ABT_INST // aborted prefetch vector
    B SERVICE_ABT_DATA // aborted data vector
    .word 0 // unused vector
    B SERVICE_IRQ // IRQ interrupt vector
    B SERVICE_FIQ // FIQ interrupt vector


.global _start
_start:

   /* 1. Set up stack pointers for IRQ and SVC processor modes */
    MSR CPSR_c, #0b11010010 // change to IRQ mode with interrupts disabled
    LDR SP, =IRQ_MODE_STACK_BASE // initiate IRQ mode stack

    MSR CPSR, #0b11010011 // change to supervisor mode, interrupts disabled
    LDR SP, =SVC_MODE_STACK_BASE // initiate supervisor mode stack
	
   /* 2. Configure the Generic Interrupt Controller (GIC). Use the given help function CONFIG_GIC! */
    // R0: The Interrupt ID to enable (only one supported for now)
    MOV R0, #73  // push buttons ID = 80
    BL CONFIG_GIC // configure the ARM GIC
	

    // Initialize the UART with receive interrupts enabled
    LDR R0, =pushbutton_interruptmask @rrrrrr
    MOV R1, #0x3 // enable REceive interrupts rrrrrrrrrrrrrrrrrrrrrrrr
    STR R1, [R0]

   /* 4. Change to the processor mode for the main program loop (for example supervisor mode) */
    /* 5. Enable the processor interrupts (IRQ in our case) */
    MSR CPSR_c, #0b01010011  // IRQ unmasked, MODE = SVC




ldr r9,=Up_button
ldr r8,=Down_button
ldr r0, =DISPLAYS_BASE_1
ldr r1, =sevenSegmentValues
ldr r11, =address
str r1, [r11]

loop:
	ldr r2, =UART_DATA_REGISTER_ADDRESS


    ldr r3, [r2]
	ldr r5,=storeValue
	ldr r11, =address
	ldr r12, [r11]
	ldr r10,[r5]
	
	mov r1, r12
	mov r6, r10

    @cmp r3, #0x00000000
    cmp r3, r9
    BEQ increase
    cmp r3, r8
    BEQ decrease
	
    str r6, [r0]
    b loop
	
increase:
	cmp r6, #0b01110001
	BEQ repeat_start
    b load_next_value

load_next_value:
	add r1, r1, #4
    ldr r6, [r1]
	str r6, [r0]
	
	ldr r7,=storeValue
	str r6,[r7]
	
	ldr r11, =address
	str r1, [r11]
	

	cmp r3, #first_pushbutton
	BEQ get_back

    b loop

load_previous_value:
	sub r1, r1, #4
    ldr r6, [r1]
	str r6, [r0]
	
	ldr r7,=storeValue
	str r6,[r7]
	
	ldr r11, =address
	str r1, [r11]
	
	cmp r3, #second_pushbutton
	BEQ get_back
    b loop

info:
	push {lr}
	ldr r7,=storeValue
	str r6,[r7]
	
	ldr r11, =address
	str r1, [r11]
	pop {lr}
	bx lr
decrease:
	cmp r6, #0b00111111
	BEQ repeat_Last
	b load_previous_value

repeat_start:
	ldr r1, =sevenSegmentValues
	b load_next_value

repeat_Last:
	add r1, r1, #64
	b load_previous_value

SERVICE_IRQ:
    PUSH {R0-R7,lr}

    /* 1. Read and acknowledge the interrupt at the GIC.The GIC returns the interrupt ID. */
    /* Read and acknowledge the interrupt at the GIC: Read the ICCIAR from the CPU Interface */
    LDR R4, =GIC_CPU_INTERFACE_BASE  // 0xFFFEC100
    LDR R5, [R4, #0x0C] // read current Interrupt ID from ICCIAR

    /* 2. Check which device raised the interrupt */
CHECK_UART_INTERRUPT:
    CMP R5, #73  // UART Interrupt ID

    BNE SERVICE_IRQ_DONE // if not recognized, some error handling or just return from interrupt

    /*
        3. Handle the specific device interrupt
        and
        4. Acknowledge the specific device interrupt
    */
    BL UART_INTERRUPT_HANDLER

SERVICE_IRQ_DONE:
    /* 5. Inform the GIC that the interrupt is handled */
    STR R5, [R4, #0x10] // write to ICCEOIR
	
    /* 6. Return from interrupt */
    POP {R0-R7,lr}

    SUBS PC, LR, #4



UART_INTERRUPT_HANDLER:
    PUSH {r6,r7,LR}
    LDR R7, =pushbutton_edgecup
    LDR R3, [R7]  // read from uart, also clears the interrupt
	str r3,[r7]
	
	
	cmp r3, #first_pushbutton
	BEQ increase

	cmp r3, #second_pushbutton
	BEQ decrease
	
storeValue: .word 0b00111111
address: .word 0

get_back:
    POP {r6,r7,pc}

   /* Undefined instructions */
SERVICE_UND:
    B SERVICE_UND
    /* Software interrupts */
SERVICE_SVC:
    B SERVICE_SVC
    /* Aborted data reads */
SERVICE_ABT_DATA:
    B SERVICE_ABT_DATA
    /* Aborted instruction fetch */
SERVICE_ABT_INST:
    B SERVICE_ABT_INST
    /* FIQ */
SERVICE_FIQ:
    B SERVICE_FIQ



/*******************************************************************
    HELP FUNCTION!
    --------------
Configures the Generic Interrupt Controller (GIC)

Arguments:
    R0: Interrupt ID
*******************************************************************/
CONFIG_GIC:
    PUSH {LR}
    /* To configure a specific interrupt ID:
    * 1. set the target to cpu0 in the ICDIPTRn register
    * 2. enable the interrupt in the ICDISERn register */
    /* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    MOV R1, #1 // this field is a bit-mask; bit 0 targets cpu0
    BL CONFIG_INTERRUPT
    /* configure the GIC CPU Interface */
    LDR R0, =GIC_CPU_INTERFACE_BASE // base address of CPU Interface, 0xFFFEC100
    /* Set Interrupt Priority Mask Register (ICCPMR) */
    LDR R1, =0xFFFF // enable interrupts of all priorities levels
    STR R1, [R0, #0x04]
    /* Set the enable bit in the CPU Interface Control Register (ICCICR).
    * This allows interrupts to be forwarded to the CPU(s) */
    MOV R1, #1
    STR R1, [R0]
    /* Set the enable bit in the Distributor Control Register (ICDDCR).
    * This enables forwarding of interrupts to the CPU Interface(s) */
    LDR R0, =GIC_DISTRIBUTOR_BASE   // 0xFFFED000
    STR R1, [R0]
    POP {PC}


/*********************************************************************
    HELP FUNCTION!
    --------------
Configure registers in the GIC for an individual Interrupt ID.

We configure only the Interrupt Set Enable Registers (ICDISERn) and
Interrupt Processor Target Registers (ICDIPTRn). The default (reset)
values are used for other registers in the GIC.

Arguments:
    R0 = Interrupt ID, N
    R1 = CPU target
*********************************************************************/
CONFIG_INTERRUPT:
    PUSH {R4-R5, LR}
    /* Configure Interrupt Set-Enable Registers (ICDISERn).
     * reg_offset = (integer_div(N / 32) * 4
     * value = 1 << (N mod 32) */
    LSR R4, R0, #3 // calculate reg_offset
    BIC R4, R4, #3 // R4 = reg_offset
    LDR R2, =0xFFFED100 // Base address of ICDISERn
    ADD R4, R2, R4 // R4 = address of ICDISER
    AND R2, R0, #0x1F // N mod 32
    MOV R5, #1 // enable
    LSL R2, R5, R2 // R2 = value
    /* Using the register address in R4 and the value in R2 set the
     * correct bit in the GIC register */
    LDR R3, [R4] // read current register value
    ORR R3, R3, R2 // set the enable bit
    STR R3, [R4] // store the new register value
    /* Configure Interrupt Processor Targets Register (ICDIPTRn)
     * reg_offset = integer_div(N / 4) * 4
     * index = N mod 4 */
    BIC R4, R0, #3 // R4 = reg_offset
    LDR R2, =0xFFFED800 // Base address of ICDIPTRn
    ADD R4, R2, R4 // R4 = word address of ICDIPTR
    AND R2, R0, #0x3 // N mod 4
    ADD R4, R2, R4 // R4 = byte address in ICDIPTR
    /* Using register address in R4 and the value in R2 write to
     * (only) the appropriate byte */
    STRB R1, [R4]
    POP {R4-R5, PC}
	
